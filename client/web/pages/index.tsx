import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { Button, ButtonText } from "@gluestack-ui/themed";
import ClientSDK from "@project/client-sdk";
import { useState } from "react";

const Meta = () => {
  return (
    <Head>
      <title>Create Gluestack App</title>
      <meta name="description" content="Generated by node glue add web" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
  );
};

const FeatureCard = ({ iconSvg, name, desc }: any) => {
  return (
    <div className={styles.card}>
      <div>
        <Image
          src={`/${iconSvg}`}
          alt="document"
          width={22}
          height={22}
          priority
        />
        <h3>{name}</h3>
      </div>
      <p>{desc}</p>
    </div>
  );
};

const Example = () => {
  const [image, setImage] = useState(null);
  const [createObjectURL, setCreateObjectURL] = useState(null);

  async function test() {
    console.log(await ClientSDK.functions?.add(2, 4));
  }
  async function db() {
    console.log(
      await ClientSDK.dbclient?.user.create({
        data: {
          title: "elsa@prisma.io",
          votes: 10,
          status: false,
        },
      })
    );
  }
  async function minio(data: any) {
    console.log(
      await ClientSDK.storageclient.putObject([
        "mybucket",
        "images/Black-and-Gold-PowerPoint-Presentation-Slide.jpg",
        "/public/test.png",
        {
          'Content-Type': 'image/jpeg',
          size: 1037143
        }
      ])
    );
    // console.log(data)
    // if (data) {
    //   var fileBuffer = Buffer.from("", data)
    //   console.log(
    //     await ClientSDK.storageclient.putObject([
    //       "mybucket",
    //       "images/Black-and-Gold-PowerPoint-Presentation-Slide.jpg",
    //       fileBuffer,
    //       {
    //         'Content-Type': 'image/jpeg',
    //         size: 1037143
    //       }
    //     ])
    //   );

    //   // const reader = new FileReader();
    //   // console.log("jijiji")
    //   // reader.onload = async (event: any) => {
    //   //   const result = event.target.result;
    //   //   const fileBuffer = Buffer.from(result); // Convert to buffer
    //   //   console.log(fileBuffer, "BUFFFER")
    //   //   // Now you have the file as a buffer (fileBuffer) and you can send it to the server or process accordingly
    //   //   console.log('File as buffer:', fileBuffer);
    //   //   console.log(data, fileBuffer)
    //   //   // console.log(await ClientSDK.storageclient.makeBucket([
    //   //   //   'mynewwbucket', "us-east-1",
    //   //   // ]))

    //   //   console.log(
    //   //     await ClientSDK.storageclient.putObject([
    //   //       "mybucket",
    //   //       "images/Black-and-Gold-PowerPoint-Presentation-Slide.jpg",
    //   //       fileBuffer,
    //   //       {
    //   //         'Content-Type': 'image/jpeg',
    //   //         size: 1037143
    //   //       }
    //   //     ])
    //   //   );
    //   // };
    //   // reader.onerror = (error) => {
    //   //   console.error('Error reading the file:', error);
    //   // };

    // }


    // blob:http://localhost:3000/fbb90fd2-c1ab-4558-8aba-6ebf1862442c
  }

  const uploadToServer = async (event: any) => {
    if (image != null) {
      const body = new FormData();
      body.append("file", image);
      // const response = await fetch("/api/file", {
      //   method: "POST",
      //   body,
      // });
    }
  };

  const uploadToClient = async (event: any) => {
    if (event.target.files && event.target.files[0]) {
      const i = event.target.files[0];

      setImage(i);
      // @ts-ignore
      setCreateObjectURL(URL.createObjectURL(i));
      console.log(event.target.files[0], URL.createObjectURL(i), "kokokoko");
      // const body = new FormData();
      // body.append("file", event.target.files[0], "knknknk");
      // ClientSDK.functions.upload()
      console.log("before")
      // console.log(awaits ClientSDK.functions.upload())
      console.log("after")

      // console.log(await ClientSDK.functions.newFunc(event.target.files[0]))
      // minio(event.target.files[0])
    }
  };
  const [file, setFile] = useState(null);

  const handleFileChange = (event: any) => {
    const selectedFile = event.target.files[0];
    setFile(selectedFile);
  };

  const handleUpload = async () => {
    if (!file) {
      alert('Please select a file.');
      return;
    }
    const formData = new FormData();
    formData.append('file', file);

    try {
      console.log(file)
      await ClientSDK
      // const response: any = await ClientSDK.functions?.upload(file)
      // const response = await fetch('http://localhost:3003/api/upload', {
      //   method: 'POST',
      //   body: formData,
      // });

      // console.log(JSON.stringify(response), "Uploaded")
      // if (response.ok) {
      //   console.log('File uploaded successfully.');
      // } else {
      //   console.error('File upload failed.');
      // }
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  async function minioTest() {
    // console.log(await ClientSDK.functions?.upload())
  }

  return (
    <div className={styles.container}>
      <div className={styles.gradient}>
        <Image src="/gradient.svg" alt="Gradient" fill priority />
      </div>
      <main className={styles.main}>
        <p className={styles.badge}>
          Get started by editing <code>pages/index.tsx</code>
        </p>
        <input
          type="file"
          name="myImage"
          onChange={handleFileChange}
          style={{
            height: 100,
            width: 200,
          }}
        />
        <button onClick={handleUpload}>Upload File</button>

        <div className={styles.logo}>
          <Image src="/logo.svg" fill alt="logo" priority />
        </div>
        <Button onPress={test}>
          <ButtonText>Button</ButtonText>
        </Button>
        <Button onPress={minio}>
          <ButtonText>Minio</ButtonText>
        </Button>
        <Button onPress={db}>
          <ButtonText>DB</ButtonText>
        </Button>
        <Button onPress={minioTest}>
          <ButtonText>TEST</ButtonText>
        </Button>
        <div className={styles.grid}>
          <FeatureCard
            iconSvg="document-data.svg"
            name="Docs"
            desc="Find in-depth information about gluestack features and API."
          />
          <FeatureCard
            iconSvg="lightbulb-person.svg"
            name="Learn"
            desc="Learn about gluestack in an interactive course with quizzes!"
          />
          <FeatureCard
            iconSvg="rocket.svg"
            name="Deploy"
            desc="Instantly drop your gluestack site to a shareable URL with vercel."
          />
        </div>
      </main>
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <div className={styles.parent}>
      <Meta />
      <Example />
    </div>
  );
};

export default Home;
